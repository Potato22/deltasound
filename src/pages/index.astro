---

---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="deltasound/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Scuffed UT/DR dialog sound generation</title>
  </head>
  <body>
	  <textarea id="inputDialog">
* Hi                    
* Have fun.                      

(Add your own sound "sprite" into the upload button.)            
(You have to trim the sounds yourself.)            
(Otherwise, well ...)            
(it'll work still. Just funny.)            

(Add more spaces to add delay between words.)            
(This is only to generate "almost" accurate sound to Undertale or Deltarune dialog sounds and **does not** account for visually correct text layout.)               

(The sounds are happening real time, if you have to record the sounds, use your own recording software, OBS, SHAREX, what not.)      
(I am scared of web FFMPEG.)
    </textarea>
	  <br />
    <input type="file" name="custSound" id="uploadedSound" />
	<button name="clearFile" id="clear">Clear File</button>
	<div class="divObjectWhoCares">delay on each character (ms):</div>
    <input type="number" name="speed" id="inputSpeed" value="40" />
	<br />
    <div class="playButton">Play</div>
    <div id="j">...</div>
  </body>
</html>

<script>
  import { typeWriter } from "../components/monolith";
  //get text area data and parse it to typeWriter();
  const textArea = document.getElementById(
    "inputDialog"
  ) as HTMLTextAreaElement | null;
  const playButton = document.querySelector(".playButton");
  const clearButton = document.getElementById("clear");

  clearButton?.addEventListener("click", () => {
	const soundUploader = document.getElementById(
	  "uploadedSound"
	) as HTMLInputElement;
	soundUploader.value = "";
  });

  playButton?.addEventListener("click", () => {
    const text: string | null = textArea?.value || "?";
    const speedInput = document.getElementById(
      "inputSpeed"
    ) as HTMLInputElement;
    const soundUploader = document.getElementById(
      "uploadedSound"
    ) as HTMLInputElement;
    const soundFile =
      soundUploader.files && soundUploader.files[0]
        ? soundUploader.files[0]
        : null;

    if (soundFile) {
      // Extract file extension for Howler's format property
      const ext = soundFile.name.split(".").pop()?.toLowerCase() || "";
      typeWriter(
        "j",
        text,
        Number(speedInput.value),
        true,
        URL.createObjectURL(soundFile),
        ext ? [ext] : undefined // pass format array if extension exists
      );
    } else {
      typeWriter("j", text, Number(speedInput.value), false);
    }
  });
</script>

<style lang="scss">

  @font-face {
    font-family: "Determination Mono Web";
    src: url("/src/DeterminationMonoWebRegular-Z5oq.ttf") format("truetype");
  }
  body {
    font-family: sans-serif;
    margin: 0;
    padding: 0;
    padding: 1em;
    background: black;
  }

  #inputDialog {
    width: 500px;
    height: 200px;
    font-family: monospace;
    max-width: 100%; /* Limit width for better readability */
    color: white;
    background: black;
    border: 1px solid white;
    padding: 5px;
  }

  #uploadedSound, .divObjectWhoCares {
    margin-top: 10px;
    color: white;
  }

  #inputSpeed {
    width: 100px;
    color: white;
    background: black;
    border: 1px solid white;
    padding: 5px;
  }

  .playButton {
    margin-top: 10px;
    background-color: #4caf50;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    text-align: center;
    display: inline-block;

    &:hover {
      background-color: #45a049;
    }
  }

  #j {
    font-family: "Determination Mono Web", monospace;
    font-size: 24px;
    line-height: 1.5;
    white-space: pre-wrap; /* Preserve whitespace and line breaks */
    word-wrap: break-word;
    max-width: 100%; /* Limit width for better readability */
    margin-top: 10px;
    color: white;
  }
</style>
